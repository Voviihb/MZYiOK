     1                                  %include "../lib_mas.asm"
     1                              <1> StrToInt:
     2 00000000 57                  <1> push edi
     3 00000001 B739                <1> mov bh,'9'
     4 00000003 B330                <1> mov bl,'0'
     5 00000005 56                  <1> push esi ; сохраняем адрес исходной строки
     6 00000006 803E2D              <1> cmp byte[esi], '-'
     7 00000009 7501                <1> jne .prod
     8 0000000B 46                  <1> inc esi ; пропускаем знак минус
     9 0000000C FC                  <1> .prod cld
    10 0000000D 6631FF              <1> xor di,di ; обнуляем будущее число
    11 00000010 AC                  <1> .cycle: lodsb ; загружаем символ (цифру)
    12 00000011 3C0A                <1> cmp al,10 ; если 10, то на конец
    13 00000013 741F                <1> je .Return
    14 00000015 38D8                <1> cmp al,bl ; сравниваем с кодом нуля
    15 00000017 722F                <1> jb .Error ; "ниже" – Ошибка
    16 00000019 38F8                <1> cmp al,bh ; сравниваем с кодом девяти
    17 0000001B 772B                <1> ja .Error ; "выше" – Ошибка
    18 0000001D 2C30                <1> sub al,30h ; получаем цифру из символа
    19 0000001F 6698                <1> cbw ; расширяем до слова
    20 00000021 6650                <1> push ax ; сохраняем в стеке
    21 00000023 66B80A00            <1> mov ax,10 ; заносим 10 в AX
    22 00000027 66F7E7              <1> mul di ; умножаем, результат в DX:AX
    23 0000002A 665F                <1> pop di ; в DI – очередная цифра
    24 0000002C 6601F8              <1> add ax,di
    25 0000002F 6689C7              <1> mov di,ax ; в DI – накопленное число
    26 00000032 EBDC                <1> jmp .cycle
    27 00000034 5E                  <1> .Return: pop esi
    28 00000035 BB00000000          <1> mov ebx,0
    29 0000003A 803E2D              <1> cmp byte[esi],'-'
    30 0000003D 7503                <1> jne .J
    31 0000003F 66F7DF              <1> neg di
    32 00000042 6689F8              <1> .J mov ax,di
    33 00000045 98                  <1> cwde
    34 00000046 EB0B                <1> jmp .R
    35 00000048 5E                  <1> .Error: pop esi
    36 00000049 B800000000          <1> mov eax,0
    37 0000004E BB01000000          <1> mov ebx,1
    38 00000053 5F                  <1> .R pop EDI
    39 00000054 C3                  <1> ret
    40                              <1> 
    41                              <1> 
    42                              <1> 
    43                              <1> IntToStr:
    44 00000055 57                  <1> push edi
    45 00000056 53                  <1> push ebx
    46 00000057 52                  <1> push edx
    47 00000058 51                  <1> push ecx
    48 00000059 56                  <1> push esi
    49 0000005A C60600              <1> mov byte[esi],0 ; на место знака
    50 0000005D 83F800              <1> cmp eax,0
    51 00000060 7D05                <1> jge .l1
    52 00000062 F7D8                <1> neg eax
    53 00000064 C6062D              <1> mov byte[esi],'-'
    54 00000067 C6460620            <1> .l1 mov byte[esi+6],0x20
    55 0000006B BF05000000          <1> mov edi,5
    56 00000070 66BB0A00            <1> mov bx,10
    57 00000074 6699                <1> .again: cwd ; расширили слово до двойного
    58 00000076 66F7F3              <1> div bx ; делим результат на 10
    59 00000079 80C230              <1> add dl,30h ; получаем из остатка код цифры
    60 0000007C 88143E              <1> mov [esi+edi],DL ; пишем символ в строку
    61 0000007F 4F                  <1> dec edi ; переводим указатель на
    62                              <1> ; предыдущую позицию
    63 00000080 6683F800            <1> cmp ax, 0 ; преобразовали все число?
    64 00000084 75EE                <1> jne .again
    65 00000086 B806000000          <1> mov eax, 6
    66 0000008B 29F9                <1> sub ecx, edi ; длина результата+знак
    67 0000008D 89C8                <1> mov eax,ecx
    68 0000008F 40                  <1> inc eax ; длина результата+знак+0А
    69 00000090 46                  <1> inc esi ; пропускаем знак
    70 00000091 56                  <1> push esi
    71 00000092 8D343E              <1> lea esi,[esi+edi] ; начало символов результата
    72 00000095 5F                  <1> pop edi
    73                              <1> ;rep movsb
    74 00000096 5E                  <1> pop esi
    75 00000097 59                  <1> pop ecx
    76 00000098 5A                  <1> pop edx
    77 00000099 5B                  <1> pop ebx
    78 0000009A 5F                  <1> pop edi
    79 0000009B C3                  <1> ret
     2                                  
     3                                  section .data ; сегмент инициализированных переменных
     4 00000000 456E74657220417272-     enterMsg db "Enter Array by lines:",10
     4 00000009 6179206279206C696E-
     4 00000012 65733A0A           
     5                                  lenEnterMsg equ $-enterMsg
     6 00000016 596F75722072657375-     outMsg db "Your result:", 10
     6 0000001F 6C743A0A           
     7                                  lenOutMsg equ $-outMsg
     8 00000023 0A                      printLine db 10
     9                                  lenPrintLine equ $-lenOutMsg
    10                                  
    11 00000024 04000000                rows dd 4 ; строки
    12 00000028 06000000                cols dd 6 ; столбцы
    13                                  
    14                                  section .bss ; сегмент неинициализированных переменных
    15 00000000 <res 0000000A>          inBuf resb 10 ; буфер для вводимой строки
    16                                  lenIn equ $-inBuf
    17                                  
    18 0000000A <res 00000007>          outBuf resb 7
    19                                  lenOut equ $-outBuf
    20                                  
    21                                  
    22                                  
    23 00000011 <res 00000060>          matrix resd 24
    24 00000071 <res 00000060>          new_matrix resd 24 ; Резервируем место под новую матрицу, 
    25                                                     ; максимум того же размера
    26 000000D1 <res 00000004>          new_cols resd 1 ; память под новое количество столбцов
    27                                  
    28                                  
    29                                  section .text ; сегмент кода
    30                                  global _start
    31                                  _start:
    32                                      ; выводим сообщение о необходимости ввода
    33 0000009C B804000000                  mov eax, 4 ; системная функция 4 (write)
    34 000000A1 BB01000000                  mov ebx, 1 ; дескриптор файла stdout=1
    35 000000A6 B9[00000000]                mov ecx, enterMsg ; адрес выводимой строки
    36 000000AB BA16000000                  mov edx, lenEnterMsg ; длина выводимой строки
    37 000000B0 CD80                        int 80h ; вызов системной функции
    38                                      
    39 000000B2 B900000000                  mov ECX, 0 ; счетчик для ввода чисел
    40                                  input:
    41 000000B7 51                          push ECX ; сохраняем значение счетчика цикла в стек
    42 000000B8 B803000000                  mov eax, 3 ; системная функция 3 (read)
    43 000000BD BB00000000                  mov ebx, 0 ; дескриптор файла stdin=0
    44 000000C2 B9[00000000]                mov ecx, inBuf ; адрес буфера ввода
    45 000000C7 BA0A000000                  mov edx, lenIn ; размер буфера
    46 000000CC CD80                        int 80h ; вызов системной функции
    47                                      
    48                                      ; передаем значние в функцию
    49 000000CE BE[00000000]                mov esi,inBuf ; адрес введенной строки
    50 000000D3 E828FFFFFF                  call StrToInt
    51 000000D8 83FB00                      cmp EBX, 0 ; проверка кода ошибки
    52                                      
    53 000000DB 59                          pop ECX ; возвращаем значение счетчика цикла из стека
    54 000000DC 89048D[11000000]            mov [matrix + ECX*4], eax ; запись числа в память   
    55 000000E3 41                          inc ECX ; увеличиваем счетчик
    56 000000E4 83F918                      cmp ECX, 24 ; ввели меньше 24 чисел? тогда продолжаем
    57 000000E7 75CE                        jne input
    58                                      
    59                                  process:
    60 000000E9 BF00000000                  mov EDI, 0 ; индекс в строке для новой матрицы
    61 000000EE B800000000                  mov EAX, 0 ; обнуляем сумму
    62 000000F3 BB00000000                  mov EBX, 0 ; смещение эл. в строке
    63 000000F8 B906000000                  mov ECX, 6 ; количество столбцов
    64                                  cycle1:
    65 000000FD 51                          push ECX ; сохраняем счетчик
    66 000000FE B903000000                  mov ECX, 3 ; количество элементов в столбце - 1
    67 00000103 8B83[11000000]              mov EAX, [EBX+matrix] ; первый элемент столбца
    68 00000109 BE18000000                  mov ESI, 24 ; смещение второго элемента столбца
    69                                  cycle2:
    70 0000010E 038433[11000000]            add EAX, [EBX+ESI+matrix] ; добавляем к сумме новый эл.
    71 00000115 83C618                      add ESI, 24 ; переход к следующему эл. в столбце
    72 00000118 E2F4                        loop cycle2 ; цикл по эл-там столбца
    73                                      
    74 0000011A A901000000                  test EAX, 1 ; проверка суммы на четность
    75 0000011F 7423                        jz next_cycle ; если четная, то обрабатываем дальше
    76                                      ; подготовка к копированию столбца
    77 00000121 31F6                        xor ESI, ESI ; сброс смещения в столбце
    78 00000123 B904000000                  mov ECX, 4 ; установка счетчика кол-во эл. в столбце
    79                                  copy_loop:
    80 00000128 8B8433[11000000]            mov EAX, [EBX+ESI+matrix] ; сохраняем элемент
    81 0000012F 898437[71000000]            mov [EDI+ESI+new_matrix], EAX ; копируем в новую матрицу
    82 00000136 83C618                      add ESI, 24 ; переход к следующему в столбце
    83 00000139 E2ED                        loop copy_loop
    84 0000013B 83C704                      add EDI, 4 ; переход к след. столбцу в новой матрице
    85 0000013E FF05[D1000000]              inc DWORD[new_cols] ; увеличиваем зн. столбцов в новой матрице
    86                                      
    87                                  
    88                                  next_cycle:
    89 00000144 59                          pop ECX ; восстановили счетчик cycle1
    90 00000145 83C304                      add EBX, 4 ; переход к след. столбцу
    91 00000148 E2B3                        loop cycle1 ; цикл по самим столбцам
    92                                      
    93                                  prepare:
    94                                      ; выводим сообщение о выводе результата
    95 0000014A B804000000                  mov eax, 4 ; системная функция 4 (write)
    96 0000014F BB01000000                  mov ebx, 1 ; дескриптор файла stdout=1
    97 00000154 B9[16000000]                mov ecx, outMsg ; адрес выводимой строки
    98 00000159 BA0D000000                  mov edx, lenOutMsg ; длина выводимой строки
    99 0000015E CD80                        int 80h ; вызов системной функции
   100                                      
   101 00000160 B904000000                  mov ECX, 4 ; количество строк
   102 00000165 BD00000000                  mov EBP, 0 ; смещение по строкам
   103                                  
   104                                  check:
   105 0000016A 833D[D1000000]00            cmp DWORD[new_cols], 0 ; если в таблице нет столбцов, то выходим
   106 00000171 746C                        jz exit
   107                                  output1:
   108 00000173 BF00000000                  mov EDI, 0 ; смещение эл. в строке
   109 00000178 51                          push ECX ; сохранили количество строк в стеке
   110 00000179 8B0D[D1000000]              mov ECX, [new_cols]
   111                                  output2:
   112 0000017F 8B84BD[71000000]            mov EAX, [new_matrix + EBP + EDI*4] ; выводимый элемент
   113 00000186 BE[0A000000]                mov ESI, outBuf ; адрес выходной строки
   114 0000018B E8C5FEFFFF                  call IntToStr
   115 00000190 51                          push ECX ; сохранили счетчик эл. внутри строки
   116 00000191 B804000000                  mov eax, 4 ; системная функция 4 (write)
   117 00000196 BB01000000                  mov ebx, 1 ; дескриптор файла stdout=1
   118 0000019B B9[0A000000]                mov ecx, outBuf ; адрес выводимой строки
   119 000001A0 BA07000000                  mov edx, lenOut ; длина выводимой строки
   120 000001A5 CD80                        int 80h ; вызов системной функции
   121                                      
   122                                      ; очищаем буфер после вывода
   123 000001A7 57                          push EDI
   124 000001A8 B907000000                  mov ECX, 7 ; длина буфера вывода
   125 000001AD B000                        mov Al, 0
   126 000001AF FC                          cld ; сброс флага направления
   127 000001B0 8D3D[0A000000]              lea EDI, [outBuf] ; забиваем нулями
   128 000001B6 F3AA                        rep stosb
   129 000001B8 5F                          pop EDI
   130                                      
   131                                      
   132 000001B9 59                          pop ECX ; восстановили счетчик эл. внутри строки
   133 000001BA 47                          inc EDI ; увеличили смещение эл. в строке
   134 000001BB E2C2                        loop output2
   135                                      
   136                                      ; выводим сообщение о необходимости ввода
   137 000001BD 50                          push eax
   138 000001BE 53                          push ebx
   139 000001BF 52                          push edx
   140 000001C0 B804000000                  mov eax, 4 ; системная функция 4 (write)
   141 000001C5 BB01000000                  mov ebx, 1 ; дескриптор файла stdout=1
   142 000001CA B9[23000000]                mov ecx, printLine ; адрес выводимой строки
   143 000001CF BA01000000                  mov edx, 1 ; длина выводимой строки
   144 000001D4 CD80                        int 80h ; вызов системной функции
   145                                      
   146 000001D6 5A                          pop edx
   147 000001D7 5B                          pop ebx
   148 000001D8 58                          pop eax
   149                                      
   150 000001D9 59                          pop ECX ; достали счетчик строк
   151 000001DA 83C518                      add EBP, 24 ; перенесли смещение по строкам на следующую
   152                                          
   153 000001DD E294                        loop output1
   154                                      
   155                                  exit:
   156 000001DF B801000000                  mov eax, 1 ; системная функция 1 (exit)
   157 000001E4 31DB                        xor ebx, ebx ; код возврата 0
   158 000001E6 CD80                        int 80h ; вызов системной функции
