     1                                  %include "../lib.asm"
     1                              <1> StrToInt:
     2 00000000 57                  <1> push edi
     3 00000001 B739                <1> mov bh,'9'
     4 00000003 B330                <1> mov bl,'0'
     5 00000005 56                  <1> push esi ; сохраняем адрес исходной строки
     6 00000006 803E2D              <1> cmp byte[esi], '-'
     7 00000009 7501                <1> jne .prod
     8 0000000B 46                  <1> inc esi ; пропускаем знак минус
     9 0000000C FC                  <1> .prod cld
    10 0000000D 6631FF              <1> xor di,di ; обнуляем будущее число
    11 00000010 AC                  <1> .cycle: lodsb ; загружаем символ (цифру)
    12 00000011 3C0A                <1> cmp al,10 ; если 10, то на конец
    13 00000013 741F                <1> je .Return
    14 00000015 38D8                <1> cmp al,bl ; сравниваем с кодом нуля
    15 00000017 722F                <1> jb .Error ; "ниже" – Ошибка
    16 00000019 38F8                <1> cmp al,bh ; сравниваем с кодом девяти
    17 0000001B 772B                <1> ja .Error ; "выше" – Ошибка
    18 0000001D 2C30                <1> sub al,30h ; получаем цифру из символа
    19 0000001F 6698                <1> cbw ; расширяем до слова
    20 00000021 6650                <1> push ax ; сохраняем в стеке
    21 00000023 66B80A00            <1> mov ax,10 ; заносим 10 в AX
    22 00000027 66F7E7              <1> mul di ; умножаем, результат в DX:AX
    23 0000002A 665F                <1> pop di ; в DI – очередная цифра
    24 0000002C 6601F8              <1> add ax,di
    25 0000002F 6689C7              <1> mov di,ax ; в DI – накопленное число
    26 00000032 EBDC                <1> jmp .cycle
    27 00000034 5E                  <1> .Return: pop esi
    28 00000035 BB00000000          <1> mov ebx,0
    29 0000003A 803E2D              <1> cmp byte[esi],'-'
    30 0000003D 7503                <1> jne .J
    31 0000003F 66F7DF              <1> neg di
    32 00000042 6689F8              <1> .J mov ax,di
    33 00000045 98                  <1> cwde
    34 00000046 EB0B                <1> jmp .R
    35 00000048 5E                  <1> .Error: pop esi
    36 00000049 B800000000          <1> mov eax,0
    37 0000004E BB01000000          <1> mov ebx,1
    38 00000053 5F                  <1> .R pop EDI
    39 00000054 C3                  <1> ret
    40                              <1> 
    41                              <1> 
    42                              <1> 
    43                              <1> IntToStr:
    44 00000055 57                  <1> push edi
    45 00000056 53                  <1> push ebx
    46 00000057 52                  <1> push edx
    47 00000058 51                  <1> push ecx
    48 00000059 56                  <1> push esi
    49 0000005A C60600              <1> mov byte[esi],0 ; на место знака
    50 0000005D 83F800              <1> cmp eax,0
    51 00000060 7D05                <1> jge .l1
    52 00000062 F7D8                <1> neg eax
    53 00000064 C6062D              <1> mov byte[esi],'-'
    54 00000067 C646060A            <1> .l1 mov byte[esi+6],10
    55 0000006B BF05000000          <1> mov edi,5
    56 00000070 66BB0A00            <1> mov bx,10
    57 00000074 6699                <1> .again: cwd ; расширили слово до двойного
    58 00000076 66F7F3              <1> div bx ; делим результат на 10
    59 00000079 80C230              <1> add dl,30h ; получаем из остатка код цифры
    60 0000007C 88143E              <1> mov [esi+edi],DL ; пишем символ в строку
    61 0000007F 4F                  <1> dec edi ; переводим указатель на
    62                              <1> ; предыдущую позицию
    63 00000080 6683F800            <1> cmp ax, 0 ; преобразовали все число?
    64 00000084 75EE                <1> jne .again
    65 00000086 B806000000          <1> mov eax, 6
    66 0000008B 29F9                <1> sub ecx, edi ; длина результата+знак
    67 0000008D 89C8                <1> mov eax,ecx
    68 0000008F 40                  <1> inc eax ; длина результата+знак+0А
    69 00000090 46                  <1> inc esi ; пропускаем знак
    70 00000091 56                  <1> push esi
    71 00000092 8D343E              <1> lea esi,[esi+edi] ; начало символов результата
    72 00000095 5F                  <1> pop edi
    73                              <1> ;rep movsb
    74 00000096 5E                  <1> pop esi
    75 00000097 59                  <1> pop ecx
    76 00000098 5A                  <1> pop edx
    77 00000099 5B                  <1> pop ebx
    78 0000009A 5F                  <1> pop edi
    79 0000009B C3                  <1> ret
     2                                  
     3                                  section .data ; сегмент инициализированных переменных
     4 00000000 456E746572206B2C20-     enterMsg db "Enter k, a, r ",10
     4 00000009 612C2072200A       
     5                                  lenEnterMsg equ $-enterMsg
     6                                  
     7                                  section .bss ; сегмент неинициализированных переменных
     8 00000000 <res 0000000A>          inBuf resb 10 ; буфер для вводимой строки
     9                                  lenIn equ $-inBuf
    10                                  
    11 0000000A <res 00000007>          outBuf resb 7
    12                                  lenOut equ $-outBuf
    13                                  
    14 00000011 <res 00000002>          k resw 1
    15 00000013 <res 00000002>          a resw 1
    16 00000015 <res 00000002>          r resw 1
    17 00000017 <res 00000002>          f resw 1
    18                                  
    19                                  section .text ; сегмент кода
    20                                  global _start
    21                                  _start:
    22                                  
    23                                  ; выводим сообщение о необходимости ввода
    24 0000009C B804000000              mov eax, 4 ; системная функция 4 (write)
    25 000000A1 BB01000000              mov ebx, 1 ; дескриптор файла stdout=1
    26 000000A6 B9[00000000]            mov ecx, enterMsg ; адрес выводимой строки
    27 000000AB BA0F000000              mov edx, lenEnterMsg ; длина выводимой строки
    28 000000B0 CD80                    int 80h ; вызов системной функции
    29                                  
    30                                  
    31                                  
    32                                  ; вводим значение k
    33 000000B2 B803000000              mov eax, 3 ; системная функция 3 (read)
    34 000000B7 BB00000000              mov ebx, 0 ; дескриптор файла stdin=0
    35 000000BC B9[00000000]            mov ecx, inBuf ; адрес буфера ввода
    36 000000C1 BA0A000000              mov edx, lenIn ; размер буфера
    37 000000C6 CD80                    int 80h ; вызов системной функции
    38                                  
    39                                  ; передаем значние в функцию
    40 000000C8 BE[00000000]            mov esi,inBuf ; адрес введенной строки
    41 000000CD E82EFFFFFF              call StrToInt
    42 000000D2 83FB00                  cmp EBX, 0 ; проверка кода ошибки
    43 000000D5 66A3[11000000]          mov [k], ax ; запись числа в память
    44                                  
    45                                  
    46                                  ; вводим значение a
    47 000000DB B803000000              mov eax, 3 ; системная функция 3 (read)
    48 000000E0 BB00000000              mov ebx, 0 ; дескриптор файла stdin=0
    49 000000E5 B9[00000000]            mov ecx, inBuf ; адрес буфера ввода
    50 000000EA BA0A000000              mov edx, lenIn ; размер буфера
    51 000000EF CD80                    int 80h ; вызов системной функции
    52                                  
    53                                  ; передаем значние в функцию
    54 000000F1 BE[00000000]            mov esi,inBuf ; адрес введенной строки
    55 000000F6 E805FFFFFF              call StrToInt
    56 000000FB 83FB00                  cmp EBX, 0 ; проверка кода ошибки
    57 000000FE 66A3[13000000]          mov [a], ax ; запись числа в память
    58                                  
    59                                  
    60                                  ; вводим значение r
    61 00000104 B803000000              mov eax, 3 ; системная функция 3 (read)
    62 00000109 BB00000000              mov ebx, 0 ; дескриптор файла stdin=0
    63 0000010E B9[00000000]            mov ecx, inBuf ; адрес буфера ввода
    64 00000113 BA0A000000              mov edx, lenIn ; размер буфера
    65 00000118 CD80                    int 80h ; вызов системной функции
    66                                  
    67                                  ; передаем значние в функцию
    68 0000011A BE[00000000]            mov esi,inBuf ; адрес введенной строки
    69 0000011F E8DCFEFFFF              call StrToInt
    70 00000124 83FB00                  cmp EBX, 0 ; проверка кода ошибки
    71 00000127 66A3[15000000]          mov [r], ax ; запись числа в память
    72                                  
    73                                  
    74                                  ; начинаем вычисления
    75 0000012D 66A1[11000000]          mov AX, [k]
    76 00000133 66F72D[13000000]        imul WORD[a] ;DX:AX = k * a
    77 0000013A 6683F805                cmp AX, 5; сравниваем AX и 5
    78 0000013E 7E16                    jle else ; if AX <= 5 переходим на ветку else
    79                                  ; k*a > 5:
    80 00000140 66A1[11000000]          mov AX, [k]
    81 00000146 6683E805                sub AX, 5 ; AX = k - 5
    82 0000014A 66F7E8                  imul AX ; DX:AX = (k - 5)^2
    83 0000014D 66F73D[15000000]        idiv WORD[r] ; DX:AX = (k - 5)^2 / r
    84 00000154 EB0B                    jmp res
    85                                  else: ; k*a <= 5 
    86 00000156 66B80800                    mov AX, 8 ; AX = 8
    87 0000015A 662B05[13000000]            sub AX, WORD[a] ; AX = 8 - a
    88                                  res: 
    89 00000161 66A3[17000000]              mov [f], AX
    90                                      
    91                                      
    92                                  ; выводим число из AX в консоль
    93 00000167 98                      cwde ; развертование ax до eax
    94 00000168 BE[0A000000]            mov ESI, outBuf
    95 0000016D E8E3FEFFFF              call IntToStr
    96 00000172 B804000000              mov eax, 4 ; системная функция 4 (write)
    97 00000177 BB01000000              mov ebx, 1 ; дескриптор файла stdout=1
    98 0000017C B9[0A000000]            mov ecx, outBuf ; адрес выводимой строки
    99 00000181 BA07000000              mov edx, lenOut ; длина выводимой строки
   100 00000186 CD80                    int 80h ; вызов системной функции
   101                                  
   102                                  ; exit
   103 00000188 B801000000              mov eax, 1 ; системная функция 1 (exit)
   104 0000018D 31DB                    xor ebx, ebx ; код возврата 0
   105 0000018F CD80                    int 80h ; вызов системной функции
