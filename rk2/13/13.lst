     1                                  %include "lib.asm"
     2                              <1> StrToInt:
     3 00000000 57                  <1> push edi
     4 00000001 B739                <1> mov bh,'9'
     5 00000003 B330                <1> mov bl,'0'
     6 00000005 56                  <1> push esi ; сохраняем адрес исходной строки
     7 00000006 803E2D              <1> cmp byte[esi], '-'
     8 00000009 7501                <1> jne .prod
     9 0000000B 46                  <1> inc esi ; пропускаем знак минус
    10 0000000C FC                  <1> .prod cld
    11 0000000D 6631FF              <1> xor di,di ; обнуляем будущее число
    12 00000010 AC                  <1> .cycle: lodsb ; загружаем символ (цифру)
    13 00000011 3C0A                <1> cmp al,10 ; если 10, то на конец
    14 00000013 741F                <1> je .Return
    15 00000015 38D8                <1> cmp al,bl ; сравниваем с кодом нуля
    16 00000017 722F                <1> jb .Error ; "ниже" – Ошибка
    17 00000019 38F8                <1> cmp al,bh ; сравниваем с кодом девяти
    18 0000001B 772B                <1> ja .Error ; "выше" – Ошибка
    19 0000001D 2C30                <1> sub al,30h ; получаем цифру из символа
    20 0000001F 6698                <1> cbw ; расширяем до слова
    21 00000021 6650                <1> push ax ; сохраняем в стеке
    22 00000023 66B80A00            <1> mov ax,10 ; заносим 10 в AX
    23 00000027 66F7E7              <1> mul di ; умножаем, результат в DX:AX
    24 0000002A 665F                <1> pop di ; в DI – очередная цифра
    25 0000002C 6601F8              <1> add ax,di
    26 0000002F 6689C7              <1> mov di,ax ; в DI – накопленное число
    27 00000032 EBDC                <1> jmp .cycle
    28 00000034 5E                  <1> .Return: pop esi
    29 00000035 BB00000000          <1> mov ebx,0
    30 0000003A 803E2D              <1> cmp byte[esi],'-'
    31 0000003D 7503                <1> jne .J
    32 0000003F 66F7DF              <1> neg di
    33 00000042 6689F8              <1> .J mov ax,di
    34 00000045 98                  <1> cwde
    35 00000046 EB0B                <1> jmp .R
    36 00000048 5E                  <1> .Error: pop esi
    37 00000049 B800000000          <1> mov eax,0
    38 0000004E BB01000000          <1> mov ebx,1
    39 00000053 5F                  <1> .R pop EDI
    40 00000054 C3                  <1> ret
    41                              <1> 
    42                              <1> 
    43                              <1> 
    44                              <1> IntToStr:
    45 00000055 57                  <1> push edi
    46 00000056 53                  <1> push ebx
    47 00000057 52                  <1> push edx
    48 00000058 51                  <1> push ecx
    49 00000059 56                  <1> push esi
    50 0000005A C60600              <1> mov byte[esi],0 ; на место знака
    51 0000005D 83F800              <1> cmp eax,0
    52 00000060 7D05                <1> jge .l1
    53 00000062 F7D8                <1> neg eax
    54 00000064 C6062D              <1> mov byte[esi],'-'
    55 00000067 C646060A            <1> .l1 mov byte[esi+6],10
    56 0000006B BF05000000          <1> mov edi,5
    57 00000070 66BB0A00            <1> mov bx,10
    58 00000074 6699                <1> .again: cwd ; расширили слово до двойного
    59 00000076 66F7F3              <1> div bx ; делим результат на 10
    60 00000079 80C230              <1> add dl,30h ; получаем из остатка код цифры
    61 0000007C 88143E              <1> mov [esi+edi],DL ; пишем символ в строку
    62 0000007F 4F                  <1> dec edi ; переводим указатель на
    63                              <1> ; предыдущую позицию
    64 00000080 6683F800            <1> cmp ax, 0 ; преобразовали все число?
    65 00000084 75EE                <1> jne .again
    66 00000086 B806000000          <1> mov eax, 6
    67 0000008B 29F9                <1> sub ecx, edi ; длина результата+знак
    68 0000008D 89C8                <1> mov eax,ecx
    69 0000008F 40                  <1> inc eax ; длина результата+знак+0А
    70 00000090 46                  <1> inc esi ; пропускаем знак
    71 00000091 56                  <1> push esi
    72 00000092 8D343E              <1> lea esi,[esi+edi] ; начало символов результата
    73 00000095 5F                  <1> pop edi
    74                              <1> ;rep movsb
    75 00000096 5E                  <1> pop esi
    76 00000097 59                  <1> pop ecx
    77 00000098 5A                  <1> pop edx
    78 00000099 5B                  <1> pop ebx
    79 0000009A 5F                  <1> pop edi
    80 0000009B C3                  <1> ret
     2                                  
     3                                  section .data ; сегмент инициализированных переменных
     4 00000000 010000000200000003-     matrix dd 1, 2, 3, 4
     4 00000009 00000004000000     
     5 00000010 0200000000000000F9-            dd 2, 0, -7, 5
     5 00000019 FFFFFF05000000     
     6 00000020 0700000009000000FC-            dd 7, 9, -4, -2
     6 00000029 FFFFFFFEFFFFFF     
     7 00000030 F7FFFFFFFBFFFFFF0B-            dd -9, -5, 11, 5
     7 00000039 00000005000000     
     8                                  
     9                                  section .bss ; сегмент неинициализированных переменных
    10 00000000 <res Ah>                inBuf resb 10 ; буфер для вводимой строки
    11                                  lenIn equ $-inBuf
    12                                  
    13 0000000A ??????????????          outBuf resb 7
    14                                  lenOut equ $-outBuf
    15                                  
    16 00000011 <res 10h>               D resd 4
    17                                  
    18                                  section .text ; сегмент кода
    19                                  global _start
    20                                  _start:
    21                                  
    22                                  process:
    23 0000009C B904000000                  mov ECX, 4 ; count of operations needed
    24 000000A1 BB00000000                  mov EBX, 0 ; current D pos
    25 000000A6 BE00000000                  mov ESI, 0 ; pos1 for main diagonal
    26 000000AB BF0C000000                  mov EDI, 12 ; pos2 for addintional diagonal
    27                                  cycle:
    28 000000B0 8B04B5[00000000]            mov EAX, [matrix+ESI*4]
    29 000000B7 F72CBD[00000000]            imul DWORD[matrix+EDI*4]
    30 000000BE 89049D[11000000]            mov [D+EBX*4], EAX
    31 000000C5 83C605                      add ESI, 5
    32 000000C8 83EF03                      sub EDI, 3
    33 000000CB 43                          inc EBX
    34 000000CC E2E2                        loop cycle
    35                                      
    36                                  finalize:
    37 000000CE B904000000                mov ECX, 4 ; total elements
    38 000000D3 BB00000000                mov EBX, 0 ; start pos
    39                                  output:
    40 000000D8 51                          push ECX
    41                                      ; очищаем буфер после вывода
    42 000000D9 B907000000                  mov ECX, 7 ; длина буфера вывода
    43 000000DE B000                        mov Al, 0
    44 000000E0 FC                          cld ; сброс флага направления
    45 000000E1 8D3D[0A000000]              lea EDI, [outBuf] ; забиваем нулями
    46 000000E7 F3AA                        rep stosb
    47 000000E9 59                          pop ECX
    48                                  
    49 000000EA BE[0A000000]                mov ESI, outBuf ; output addr
    50 000000EF 8B049D[11000000]            mov EAX, [D+EBX*4] ; to be converted to string
    51 000000F6 51                          push ECX ; save data
    52 000000F7 53                          push EBX
    53 000000F8 E858FFFFFF                  call IntToStr
    54 000000FD B804000000                  mov eax, 4 ; системная функция 4 (write)
    55 00000102 BB01000000                  mov ebx, 1 ; дескриптор файла stdout=1
    56 00000107 B9[0A000000]                mov ecx, outBuf ; адрес выводимой строки
    57 0000010C BA07000000                  mov edx, lenOut ; длина выводимой строки
    58 00000111 CD80                        int 80h ; вызов системной функции
    59                                      
    60 00000113 5B                          pop EBX
    61 00000114 59                          pop ECX
    62 00000115 43                          inc EBX ; pos = pos + 1
    63 00000116 E2C0                        loop output
    64                                    
    65                                  exit:
    66 00000118 B801000000                  mov eax, 1 ; системная функция 1 (exit)
    67 0000011D 31DB                        xor ebx, ebx ; код возврата 0
    68 0000011F CD80                        int 80h ; вызов системной функции
