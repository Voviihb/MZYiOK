     1                                  %include "lib.asm"
     2                              <1> StrToInt:
     3 00000000 57                  <1> push edi
     4 00000001 B739                <1> mov bh,'9'
     5 00000003 B330                <1> mov bl,'0'
     6 00000005 56                  <1> push esi ; сохраняем адрес исходной строки
     7 00000006 803E2D              <1> cmp byte[esi], '-'
     8 00000009 7501                <1> jne .prod
     9 0000000B 46                  <1> inc esi ; пропускаем знак минус
    10 0000000C FC                  <1> .prod cld
    11 0000000D 6631FF              <1> xor di,di ; обнуляем будущее число
    12 00000010 AC                  <1> .cycle: lodsb ; загружаем символ (цифру)
    13 00000011 3C0A                <1> cmp al,10 ; если 10, то на конец
    14 00000013 741F                <1> je .Return
    15 00000015 38D8                <1> cmp al,bl ; сравниваем с кодом нуля
    16 00000017 722F                <1> jb .Error ; "ниже" – Ошибка
    17 00000019 38F8                <1> cmp al,bh ; сравниваем с кодом девяти
    18 0000001B 772B                <1> ja .Error ; "выше" – Ошибка
    19 0000001D 2C30                <1> sub al,30h ; получаем цифру из символа
    20 0000001F 6698                <1> cbw ; расширяем до слова
    21 00000021 6650                <1> push ax ; сохраняем в стеке
    22 00000023 66B80A00            <1> mov ax,10 ; заносим 10 в AX
    23 00000027 66F7E7              <1> mul di ; умножаем, результат в DX:AX
    24 0000002A 665F                <1> pop di ; в DI – очередная цифра
    25 0000002C 6601F8              <1> add ax,di
    26 0000002F 6689C7              <1> mov di,ax ; в DI – накопленное число
    27 00000032 EBDC                <1> jmp .cycle
    28 00000034 5E                  <1> .Return: pop esi
    29 00000035 BB00000000          <1> mov ebx,0
    30 0000003A 803E2D              <1> cmp byte[esi],'-'
    31 0000003D 7503                <1> jne .J
    32 0000003F 66F7DF              <1> neg di
    33 00000042 6689F8              <1> .J mov ax,di
    34 00000045 98                  <1> cwde
    35 00000046 EB0B                <1> jmp .R
    36 00000048 5E                  <1> .Error: pop esi
    37 00000049 B800000000          <1> mov eax,0
    38 0000004E BB01000000          <1> mov ebx,1
    39 00000053 5F                  <1> .R pop EDI
    40 00000054 C3                  <1> ret
    41                              <1> 
    42                              <1> 
    43                              <1> 
    44                              <1> IntToStr:
    45 00000055 57                  <1> push edi
    46 00000056 53                  <1> push ebx
    47 00000057 52                  <1> push edx
    48 00000058 51                  <1> push ecx
    49 00000059 56                  <1> push esi
    50 0000005A C60600              <1> mov byte[esi],0 ; на место знака
    51 0000005D 83F800              <1> cmp eax,0
    52 00000060 7D05                <1> jge .l1
    53 00000062 F7D8                <1> neg eax
    54 00000064 C6062D              <1> mov byte[esi],'-'
    55 00000067 C646060A            <1> .l1 mov byte[esi+6],10
    56 0000006B BF05000000          <1> mov edi,5
    57 00000070 66BB0A00            <1> mov bx,10
    58 00000074 6699                <1> .again: cwd ; расширили слово до двойного
    59 00000076 66F7F3              <1> div bx ; делим результат на 10
    60 00000079 80C230              <1> add dl,30h ; получаем из остатка код цифры
    61 0000007C 88143E              <1> mov [esi+edi],DL ; пишем символ в строку
    62 0000007F 4F                  <1> dec edi ; переводим указатель на
    63                              <1> ; предыдущую позицию
    64 00000080 6683F800            <1> cmp ax, 0 ; преобразовали все число?
    65 00000084 75EE                <1> jne .again
    66 00000086 B806000000          <1> mov eax, 6
    67 0000008B 29F9                <1> sub ecx, edi ; длина результата+знак
    68 0000008D 89C8                <1> mov eax,ecx
    69 0000008F 40                  <1> inc eax ; длина результата+знак+0А
    70 00000090 46                  <1> inc esi ; пропускаем знак
    71 00000091 56                  <1> push esi
    72 00000092 8D343E              <1> lea esi,[esi+edi] ; начало символов результата
    73 00000095 5F                  <1> pop edi
    74                              <1> ;rep movsb
    75 00000096 5E                  <1> pop esi
    76 00000097 59                  <1> pop ecx
    77 00000098 5A                  <1> pop edx
    78 00000099 5B                  <1> pop ebx
    79 0000009A 5F                  <1> pop edi
    80 0000009B C3                  <1> ret
     2                                  
     3                                  section .data ; сегмент инициализированных переменных
     4 00000000 010000000200000003-     matrix dd 1, 2, 3, 4, 5
     4 00000009 000000040000000500-
     4 00000012 0000               
     5 00000014 0200000000000000F9-            dd 2, 0, -7, 5, 10
     5 0000001D FFFFFF050000000A00-
     5 00000026 0000               
     6 00000028 0700000009000000FC-            dd 7, 9, -4, -2, -1
     6 00000031 FFFFFFFEFFFFFFFFFF-
     6 0000003A FFFF               
     7 0000003C F7FFFFFFFBFFFFFF0B-            dd -9, -5, 11, 5, 52
     7 00000045 000000050000003400-
     7 0000004E 0000               
     8 00000050 FEFFFFFFFBFFFFFFFD-            dd -2, -5, -3, -7, -10
     8 00000059 FFFFFFF9FFFFFFF6FF-
     8 00000062 FFFF               
     9                                  
    10                                  section .bss ; сегмент неинициализированных переменных
    11 00000000 <res Ah>                inBuf resb 10 ; буфер для вводимой строки
    12                                  lenIn equ $-inBuf
    13                                  
    14 0000000A ??????????????          outBuf resb 7
    15                                  lenOut equ $-outBuf
    16                                  
    17 00000011 <res 14h>               tempMas resd 5
    18                                  
    19                                  section .text ; сегмент кода
    20                                  global _start
    21                                  _start:
    22                                  
    23                                  process:
    24 0000009C BB00000000                  mov EBX, 0
    25 000000A1 B905000000                  mov ECX, 5
    26                                  cycle1:
    27 000000A6 51                          push ECX
    28 000000A7 B905000000                  mov ECX, 5
    29 000000AC 8B049D[00000000]            mov EAX, [matrix+EBX*4] ; first elem is temp max
    30                                  cycle2:
    31 000000B3 8B149D[00000000]            mov EDX, [matrix+EBX*4] ; current elem
    32 000000BA 39C2                        cmp EDX, EAX 
    33 000000BC 7F25                        jg change_max ; if EDX > EAX
    34                                  continue:
    35 000000BE 43                          inc EBX
    36 000000BF E2F2                        loop cycle2
    37                                      
    38 000000C1 59                          pop ECX ; if cycle2 is finished
    39 000000C2 BA05000000                  mov EDX, 5
    40 000000C7 29CA                        sub EDX, ECX ; get current row
    41 000000C9 890495[11000000]            mov [tempMas+EDX*4], EAX ; write row maximum
    42 000000D0 E2D4                        loop cycle1
    43                                      
    44 000000D2 B905000000                  mov ECX, 5 ; new counter
    45 000000D7 BB00000000                  mov EBX, 0 ; start position
    46 000000DC BA00000000                  mov EDX, 0 ; row counter
    47 000000E1 EB04                        jmp change_matrix ; if cycle1 is finished
    48                                  change_max:
    49 000000E3 89D0                        mov EAX, EDX ; update max
    50 000000E5 EBD7                        jmp continue
    51                                   
    52                                  change_matrix:
    53 000000E7 8B0495[11000000]            mov EAX, [tempMas+EDX*4]
    54 000000EE 89049D[00000000]            mov [matrix+EBX*4], EAX
    55 000000F5 83C306                      add EBX, 6 ; change position
    56 000000F8 42                          inc EDX ; inc row counter
    57 000000F9 E2EC                        loop change_matrix
    58                                      
    59                                  finalize:
    60 000000FB B919000000                mov ECX, 25 ; total elements
    61 00000100 BB00000000                mov EBX, 0 ; start pos
    62                                  output:
    63 00000105 51                          push ECX
    64                                      ; очищаем буфер после вывода
    65 00000106 B907000000                  mov ECX, 7 ; длина буфера вывода
    66 0000010B B000                        mov Al, 0
    67 0000010D FC                          cld ; сброс флага направления
    68 0000010E 8D3D[0A000000]              lea EDI, [outBuf] ; забиваем нулями
    69 00000114 F3AA                        rep stosb
    70 00000116 59                          pop ECX
    71                                  
    72 00000117 BE[0A000000]                mov ESI, outBuf ; output addr
    73 0000011C 8B049D[00000000]            mov EAX, [matrix+EBX*4] ; to be converted to string
    74 00000123 51                          push ECX ; save data
    75 00000124 53                          push EBX
    76 00000125 E82BFFFFFF                  call IntToStr
    77 0000012A B804000000                  mov eax, 4 ; системная функция 4 (write)
    78 0000012F BB01000000                  mov ebx, 1 ; дескриптор файла stdout=1
    79 00000134 B9[0A000000]                mov ecx, outBuf ; адрес выводимой строки
    80 00000139 BA07000000                  mov edx, lenOut ; длина выводимой строки
    81 0000013E CD80                        int 80h ; вызов системной функции
    82                                      
    83 00000140 5B                          pop EBX
    84 00000141 59                          pop ECX
    85 00000142 43                          inc EBX ; pos = pos + 1
    86 00000143 E2C0                        loop output
    87                                    
    88                                  exit:
    89 00000145 B801000000                  mov eax, 1 ; системная функция 1 (exit)
    90 0000014A 31DB                        xor ebx, ebx ; код возврата 0
    91 0000014C CD80                        int 80h ; вызов системной функции
